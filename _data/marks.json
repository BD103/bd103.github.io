{
  "utils": [
    {
      "name": "Toggle CSS",
      "desc": "Enables or disables the styling of a website",
      "data": "javascript:(function(){function d(a,b){a.setAttribute('data-css-storage',b)}function e(a){var b=a.getAttribute('data-css-storage');a.removeAttribute('data-css-storage');return b}var c=[];(function(){var a=document.body,b=a.hasAttribute('data-css-disabled');b?a.removeAttribute('data-css-disabled'):a.setAttribute('data-css-disabled','');return b})()?(c=document.querySelectorAll('[data-css-storage]'),[].slice.call(c).forEach(function(a){'STYLE'===a.tagName?a.innerHTML=e(a):'LINK'===a.tagName?a.disabled=!1:a.style.cssText=e(a)})):(c=document.querySelectorAll('[style], link, style'),[].slice.call(c).forEach(function(a){'STYLE'===a.tagName?(d(a,a.innerHTML),a.innerHTML=''):'LINK'===a.tagName?(d(a,''),a.disabled=!0):(d(a,a.style.cssText),a.style.cssText='')}))})();"
    },
    {
      "name": "Kill Element",
      "desc": "Click any element to remove it",
      "data": "javascript:for(var i=0; i<(document.getElementsByTagName('a')).length; i++) {(document.getElementsByTagName('a')[i]).style.pointerEvents = 'none';}function handler(e) {e = e || window.event;var target = e.target || e.srcElement;target.style.display = 'none';document.removeEventListener('click', handler, false);cursor('default');for(var i=0; i<(document.getElementsByTagName('a')).length; i++) {(document.getElementsByTagName('a')[i]).style.pointerEvents = 'initial';}}document.addEventListener('click', handler, false);cursor('crosshair');function cursor(cur) { document.body.style.cursor = cur; }"
    },
    {
      "name": "Forceful Pasting",
      "desc": "This forcefully allows pasting, even if a site tries to disable it with Javascript",
      "data": "javascript:(function()%7Bvar allowPaste %3D function(e)%7Be.stopImmediatePropagation()%3Breturn true%3B%7D%3Bdocument.addEventListener('paste'%2C allowPaste%2C true)%7D)()"
    }
  ],
  "fun": [
    {
      "name": "Autoclick",
      "desc": "Select any button, like the example below",
      "data": "javascript:var DELAY = 0.5;var autoClickerStyleElement = document.createElement('style');autoClickerStyleElement.innerHTML='*{cursor: crosshair !important;}';document.body.appendChild(autoClickerStyleElement);function addClicker(e) {if(!e.isTrusted) {return;}if(e.target.classList.contains('auto-clicker-target')) {e.target.classList.remove('auto-clicker-target');} else {e.target.classList.add('auto-clicker-target');}document.body.removeChild(autoClickerStyleElement);document.body.removeEventListener('click', addClicker);e.preventDefault();autoClick(e.target);}function autoClick(element) {if(element.classList.contains('auto-clicker-target')) {element.click();setTimeout(function(){ autoClick(element); }, DELAY);}}document.body.addEventListener('click', addClicker, 0);"
    }
  ],
  "fx": [
    {
      "name": "Glitch",
      "desc": "Make any text shift and be weird",
      "data": "javascript: (function() {  window.__glitch_runs = window.__glitch_runs ? window.__glitch_runs + 1 : 1;  const MODES = {    STANDARD: 'STANDARD',    TURBO: 'TURBO'  };  const OPTIONS = Object.assign(    { G_T: false, G_I: true, TURBO: false },    {G_T:true} || {}  );  const GLITCH_TEXT = OPTIONS.G_T;  const GLITCH_IMAGES = OPTIONS.G_I;  const MODE = OPTIONS.TURBO ? MODES.TURBO : MODES.STANDARD;  if (MODE === MODES.TURBO) {    window.__glitch_runs = 3;  }  const transformTranspose = (header, input, gap = 1) => {    const idx =      header + Math.floor(Math.random() * (input.length - header - gap));    const tmp = input[idx];    input[idx] = input[idx + gap];    input[idx + gap] = tmp;    return input;  };  const transformSubstitute = (header, input) => {    const by = Math.floor(Math.random() * 256);    const idx = header + Math.floor(Math.random() * (input.length - header));    input[idx] = by;    return input;  };  const transformText = str => {    let bytes = new TextEncoder('utf-8').encode(str);    const errors = Math.random() * (0.05 * str.length);    for (let i = 0; i < errors; i += 1) {      bytes =        Math.random() > 0.5          ? transformSubstitute(0, bytes)          : transformTranspose(            0,            bytes,            Math.floor(Math.random() * str.length - 1) + 1          );    }    const string = new TextDecoder('utf-8').decode(bytes);    return string;  };  const glitchImage = image => {    try {      image.onload = () => {};      image.style.backgroundColor = '#262626';      const canvas = document.createElement('canvas');      const context = canvas.getContext('2d');      canvas.width = image.naturalWidth;      canvas.height = image.naturalHeight;      context.drawImage(image, 0, 0);      const data = canvas.toBlob(blob => {        const fileReader = new FileReader();        fileReader.onload = event => {          const data =            blob.size === event.target.result.byteLength              ? new Uint8Array(event.target.result)              : null;          image.onerror = () => {            image.src = URL.createObjectURL(blob);          };          const glitchOnce = () => {            const errors = Math.random() * 10 * window.__glitch_runs;            let corrupted = data.slice(0);            for (let i = 0; i < errors; i++) {              corrupted =                Math.random() > 0.5                  ? transformTranspose(100, corrupted)                  : transformSubstitute(100, corrupted);            }            const corruptBlob = new Blob([corrupted], { type: 'image/png' });            const corruptSrc = URL.createObjectURL(corruptBlob);            image.src = corruptSrc;          };          const glitchImageRaf = () => {            glitchOnce();            window.requestAnimationFrame(glitchImageRaf);          };          const glitchImageTimeout = (max = 300) => {            glitchOnce();            window.setTimeout(() => {              glitchImageTimeout(max);            }, Math.random() * max / 2 + Math.random() * max / 2);          };          if (MODE === MODES.STANDARD) {            glitchImageTimeout();          } else if (MODE === MODES.TURBO) {            glitchImageRaf();          }        };        fileReader.readAsArrayBuffer(blob);      }, 'image/jpeg');    } catch (e) {      return false;    }  };  const glitchText = n => {    const original = n.textContent;    const glitchText = () => {      n.textContent = transformText(original).replace(/ï¿½/g, '');    };    const glitchTextTimeout = (max = 1000) => {      glitchText();      window.setTimeout(() => {        glitchTextTimeout(max);      }, Math.random() * max / 2 + Math.random() * max / 2);    };    const glitchTextRaf = () => {      glitchText();      window.requestAnimationFrame(glitchTextRaf);    };    glitchTextTimeout();  };  const textNodesUnder = el => {    let n;    const a = [];    const walk = document.createTreeWalker(      el,      NodeFilter.SHOW_TEXT,      null,      false    );    while ((n = walk.nextNode())) {      a.push(n);    }    return a;  };  const setupGlitch = () => {    if (GLITCH_IMAGES) {      const images = document.querySelectorAll('img');      images.forEach(i => {        i.complete          ? glitchImage(i)          : (i.onload = event => glitchImage(event.target));      });    }    if (GLITCH_TEXT) {      const textNodes = textNodesUnder(document.body).filter(        n => n.textContent && n.textContent.length > 0 && n.textContent.trim()      );      textNodes.forEach(glitchText);    }  };  if (document.readyState === 'complete') {    setupGlitch();  } else {    document.body.addEventListener('load', setupGlitch);  }})();"
    },
    {
      "name": "E-ifier",
      "desc": "Change all real text to E",
      "data": "javascript: javascript:(function() { window.g = function() { function G(element) { if (element.childNodes.length > 0) for (var i = 0; i < element.childNodes.length; i++) { if(element.childNodes[i].nodeName.toLowerCase() !== 'style' && element.childNodes[i].nodeName.toLowerCase() !== 'script') { G(element.childNodes[i]); } } if (element.nodeType === Node.TEXT_NODE && element.nodeValue !== '') { element.textContent = element.textContent.replace(/[a-z]/g, 'e').replace(/[A-Z]/g, 'E'); } } var html = document.getElementsByTagName('html')[0]; G(html); }; g(); })();"
    },
    {
      "name": "Pink!",
      "desc": "Nothing else to it",
      "data": "javascript:(function(){document.body.style.background = 'pink';})();"
    }
  ]
}
